open System
open System.IO
open System.Text

[<EntryPoint>]
let main _ =
    // (Fib, Prime factors)
    let fibArray = [|(0L, []); (1L, []); (1L, []); (2L, [2L]); (3L, [3L]); (5L, [5L]); (8L, [2L; 2L; 2L]); (13L, [13L]); (21L, [3L; 7L]); (34L, [2L; 17L]); (55L, [5L; 11L]);
        (89L, [89L]); (144L, [2L; 2L; 2L; 2L; 3L; 3L]); (233L, [233L]); (377L, [13L; 29L]); (610L, [2L; 5L; 61L]); (987L, [3L; 7L; 47L]); (1597L, [1597L]); (2584L, [2L; 2L; 2L; 17L; 19L]);
        (4181L, [37L; 113L]); (6765L, [3L; 5L; 11L; 41L]); (10946L, [2L; 13L; 421L]); (17711L, [89L; 199L]); (28657L, [28657L]); (46368L, [2L; 2L; 2L; 2L; 2L; 3L; 3L; 7L; 23L]);
        (75025L, [5L; 5L; 3001L]); (121393L, [233L; 521L]); (196418L, [2L; 17L; 53L; 109L]); (317811L, [3L; 13L; 29L; 281L]); (514229L, [514229L]); (832040L, [2L; 2L; 2L; 5L; 11L; 31L; 61L]);
        (1346269L, [557L; 2417L]); (2178309L, [3L; 7L; 47L; 2207L]); (3524578L, [2L; 89L; 19801L]); (5702887L, [1597L; 3571L]); (9227465L, [5L; 13L; 141961L]);
        (14930352L, [2L; 2L; 2L; 2L; 3L; 3L; 3L; 17L; 19L; 107L]); (24157817L, [73L; 149L; 2221L]); (39088169L, [37L; 113L; 9349L]); (63245986L, [2L; 233L; 135721L]);
        (102334155L, [3L; 5L; 7L; 11L; 41L; 2161L]); (165580141L, [2789L; 59369L]); (267914296L, [2L; 2L; 2L; 13L; 29L; 211L; 421L]); (433494437L, [433494437L]);
        (701408733L, [3L; 43L; 89L; 199L; 307L]); (1134903170L, [2L; 5L; 17L; 61L; 109441L]); (1836311903L, [139L; 461L; 28657L]); (2971215073L, [2971215073L]);
        (4807526976L, [2L; 2L; 2L; 2L; 2L; 2L; 3L; 3L; 7L; 23L; 47L; 1103L]); (7778742049L, [13L; 97L; 6168709L]); (12586269025L, [5L; 5L; 11L; 101L; 151L; 3001L]);
        (20365011074L, [2L; 1597L; 6376021L]); (32951280099L, [3L; 233L; 521L; 90481L]); (53316291173L, [953L; 55945741L]); (86267571272L, [2L; 2L; 2L; 17L; 19L; 53L; 109L; 5779L]);
        (139583862445L, [5L; 89L; 661L; 474541L]); (225851433717L, [3L; 7L; 7L; 13L; 29L; 281L; 14503L]); (365435296162L, [2L; 37L; 113L; 797L; 54833L]); (591286729879L, [59L; 19489L; 514229L]);
        (956722026041L, [353L; 2710260697L]); (1548008755920L, [2L; 2L; 2L; 2L; 3L; 3L; 5L; 11L; 31L; 41L; 61L; 2521L]); (2504730781961L, [4513L; 555003497L]); (4052739537881L, [557L; 2417L; 3010349L]);
        (6557470319842L, [2L; 13L; 17L; 421L; 35239681L]); (10610209857723L, [3L; 7L; 47L; 1087L; 2207L; 4481L]); (17167680177565L, [5L; 233L; 14736206161L]);
        (27777890035288L, [2L; 2L; 2L; 89L; 199L; 9901L; 19801L]); (44945570212853L, [269L; 116849L; 1429913L]); (72723460248141L, [3L; 67L; 1597L; 3571L; 63443L]);
        (117669030460994L, [2L; 137L; 829L; 18077L; 28657L]); (190392490709135L, [5L; 11L; 13L; 29L; 71L; 911L; 141961L]); (308061521170129L, [6673L; 46165371073L]);
        (498454011879264L, [2L; 2L; 2L; 2L; 2L; 3L; 3L; 3L; 7L; 17L; 19L; 23L; 107L; 103681L]); (806515533049393L, [9375829L; 86020717L]); (1304969544928657L, [73L; 149L; 2221L; 54018521L]);
        (2111485077978050L, [2L; 5L; 5L; 61L; 3001L; 230686501L]); (3416454622906707L, [3L; 37L; 113L; 9349L; 29134601L]); (5527939700884757L, [13L; 89L; 988681L; 4832521L]);
        (8944394323791464L, [2L; 2L; 2L; 79L; 233L; 521L; 859L; 135721L]); (14472334024676221L, [157L; 92180471494753L]); (23416728348467685L, [3L; 5L; 7L; 11L; 41L; 47L; 1601L; 2161L; 3041L]);
        (37889062373143906L, [2L; 17L; 53L; 109L; 2269L; 4373L; 19441L]); (61305790721611591L, [2789L; 59369L; 370248451L]); (99194853094755497L, [99194853094755497L]);
        (160500643816367088L, [2L; 2L; 2L; 2L; 3L; 3L; 13L; 29L; 83L; 211L; 281L; 421L; 1427L]); (259695496911122585L, [5L; 1597L; 9521L; 3415914041L]); (420196140727489673L, [6709L; 144481L; 433494437L]);
        (679891637638612258L, [2L; 173L; 514229L; 3821263937L]); (1100087778366101931L, [3L; 7L; 43L; 89L; 199L; 263L; 307L; 881L; 967L]); (1779979416004714189L, [1069L; 1665088321800481L]);
        (2880067194370816120L, [2L; 2L; 2L; 5L; 11L; 17L; 19L; 31L; 61L; 181L; 541L; 109441L]); (4660046610375530309L, [13L; 13L; 233L; 741469L; 159607993L]);
        (7540113804746346429L, [3L; 139L; 461L; 4969L; 28657L; 275449L]) |]

    use stream = new StreamReader(Console.OpenStandardInput())

    let makeRange = Array.map int64
    let result = new StringBuilder()

    let rec solve n =
        let origin = stream.ReadLine()
        match origin with
        | _ when origin = null || origin = "" -> ()
        | _ ->
            let range = origin.Trim().Split() |> makeRange
            match range with
            | _ when range.[0] >= range.[1] -> ()
            | _ ->
                result.Append("Range " + range.[0].ToString() + " to " + range.[1].ToString() + ":\n") |> ignore
                let count = fibArray |> Array.filter (fun x -> fst x >= range.[0] && fst x <= range.[1]) |> Array.length
                match count with
                | 0 -> result.Append "No Fibonacci numbers in the range\n" |> ignore
                | _ ->
                    fibArray
                    |> Array.iteri (fun i x ->
                        match fst x with
                        | n when n < range.[0] || n > range.[1] -> ()
                        | _ ->
                            result.Append("Fib(" + i.ToString() + ") = " + (fst x).ToString() + ", ")
                                .Append(if fst x = 0L then "lg does not exist\n" else "lg is " + (Math.Round(Math.Log2(fst x |> float), 6, MidpointRounding.AwayFromZero).ToString("F6") + "\n"))
                                .Append(if snd x |> List.length = 0 then "No prime factors\n" else "Prime factors: " + (snd x |> List.fold (fun acc x -> acc + x.ToString() + " ") "") + "\n")
                                |> ignore)
                result.Append("\n") |> ignore
                solve (n + 1L)

    solve 0L
    printf "%O" <| result.ToString().TrimEnd()
    0